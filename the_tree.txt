
#include <conio.h>
#include <stdio.h>
#include <process.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define max 100
struct BTNode
{
	int tem1, tem2;
	BTNode *lchild;
	BTNode *rchild;
	int data;
}Tree[110];
int loc;//静态数组已分配的结点个数
BTNode *creat();
int n = 0;//查找结点的时候使用 
BTNode *creat1();
void PreOrder(BTNode *T);//递归先序 
void InOrder(BTNode *T);//递归中序 
void PostOrder(BTNode *T);//递归后序 
BTNode *insert(BTNode *T);
BTNode *insert1(BTNode *T, int x);
int BTNodeDepth(BTNode *T);//递归深度
int  LeafNodes(BTNode *T); //递归计算叶子结点数
BTNode Swap(BTNode *T);//递归算法，将二叉树中所有结点的左、右子树相互交换
void PreOrder1(BTNode *T);//使用非递归先序遍历二叉树 
void LevelOrder(BTNode *T);//层序遍历 
int   trave(BTNode *T, int k);//在以Tree为根指针的二叉排序树中查找结点；
int count(BTNode *T);//计算结点数
void delBST(BTNode *T);
BTNode* delUsing(BTNode *T, int key);
BTNode *del(BTNode *pRoot);
void generalized_list(BTNode *T);

//从以Tree为根指针的二叉排序树中删除结点（适用各种位置的结点）；
char ch;
int main()
{
	int n, x, i, j;
	int a, b, k;
	BTNode *T = NULL;
	char choice;
	//////////////加空 
	while (1)
	{
		system("cls");
		printf("\n\n\n\n");
		printf("\t\t              二叉树操作  \n");
		printf("\t\t======================================");
		printf("\n\n");
		printf("\t\t             1：二叉树的创建      \n");
		printf("\t\t             2：递归前序遍历\n");
		printf("\t\t             3：递归中序遍历\n");
		printf("\t\t             4：递归后序遍历\n");
		printf("\t\t             5：递归计算叶子结点数目        \n");
		printf("\t\t             6：递归计算二叉树的深度        \n");
		printf("\t\t             7：递归相互交换左,右子树        \n");
		printf("\t\t             8：非递归先序遍历        \n");
		printf("\t\t             9：层序遍历      \n");
		printf("\t\t             a：用广义表表示二叉树      \n");
		printf("\t\t \n");
		printf("\t\t             z：二叉排序树的创建      \n");
		printf("\t\t             y:查找二叉排序树结点\n");
		printf("\t\t             x:删除二叉排序树结点\n");
		printf("\t\t                  \n");
		printf("\t\t             0：退出        \n");
		printf("\n");
		printf("\t\t请选择：");
		choice = getchar();
		system("cls");
		switch (choice)

		{
		case '1':
			T = creat();
			T = insert(T);

			break;
		case '2':
			PreOrder(T);//递归先序 
			ch = getchar(); ch = getchar();
			break;
		case '3':
			InOrder(T);
			ch = getchar(); ch = getchar();
			break;
		case '4':
			PostOrder(T);
			ch = getchar(); ch = getchar();
			break;
		case '5':
			printf("二叉树的叶子结点个数为：%d\n", LeafNodes(T));
			ch = getchar(); ch = getchar();
			break;
		case '6':
			printf("二叉树的深度为：%d\n", BTNodeDepth(T));
			ch = getchar(); ch = getchar();
			break;
		case '7':
			BTNode * start;
			start = T;
			Swap(T);
			PreOrder(start);
			printf("该二叉树的所有结点的左、右子树已交换\n");
			ch = getchar(); ch = getchar();
			break;
		case '8':
			PreOrder1(T);
			ch = getchar(); ch = getchar();
			break;
		case '9':
			LevelOrder(T);
			ch = getchar(); ch = getchar();
			break;
		case 'a':
			printf("(");
			generalized_list(T);
			printf(")");
			ch = getchar(); ch = getchar();
			break;

		case 'z':
			printf("请输入二叉树结点数：");
			scanf_s("%d", &n);
			loc = 0;

			for (i = 0; i<n; i++)
			{
				printf("请输入第%d个元素：", i + 1);
				scanf_s("%d", &j);
				T = insert1(T, j);
			}

			break;
		case 'y':
			printf("请输入查找第几个结点：");
			scanf_s("%d", &a);
			if (a>count(T) || a <= 0)
			{
				printf("输入信息错误，请重新输入\n");
			}
			printf("已查找到该数，该数为%d\n", trave(T, a));
			ch = getchar(); ch = getchar();
			break;
		case 'x':
			delBST(T);
			PreOrder(T);
			ch = getchar(); ch = getchar();
			break;
		case '0':
			exit(0);
		}
	}

	return 0;
}
//创造二叉树 
//初始化树 
BTNode *creat()//申请一个结点空间，返回指向其的指针 
{
	Tree[loc].lchild = Tree[loc].rchild = NULL;//初始化左右儿子为空 
	return &Tree[loc++];//返回指针，loc累加 
}
//插入元素 
//利用了先序遍历建造二叉数 
BTNode *insert(BTNode *T)
{

	printf("以-1表示指针域为空。\n");
	T = NULL;
	int data = 0;
	printf("请输入数据：");
	scanf_s("%d", &data);
	if (data == -1)
		return NULL;
	T = (BTNode*)malloc(sizeof(BTNode) * 1);
	if (T == NULL)
	{
		printf("创建失败！\n");
		exit(EXIT_FAILURE);
	}
	T->data = data;
	T->lchild = insert(T->lchild);
	T->rchild = insert(T->rchild);
	return T;

}

//递归前序遍历 
void PreOrder(BTNode *T)
{   //根左右 
	printf("%d ", T->data);//访问根结点   

	if (T->lchild != NULL)//递归调用左子树 
		PreOrder(T->lchild);
	if (T->rchild != NULL)//递归调用右子树 
		PreOrder(T->rchild);

}

//递归中序遍历 
void InOrder(BTNode *T)
{   //左根右 
	if (T->lchild != NULL)
	{
		InOrder(T->lchild);
	}//递归调用左子树 
	printf("%d ", T->data);//访问根结点
	if (T->rchild != NULL)//递归调用右子树
	{
		InOrder(T->rchild);
	}

}

//递归后序遍历 
void PostOrder(BTNode *T)
{    //左右根 
	if (T->lchild != NULL)//递归调用左子树 
		InOrder(T->lchild);
	if (T->rchild != NULL) {
		InOrder(T->rchild); 	//递归调用右子树	
	}
	printf("%d ", T->data);//访问根结点

}

//递归叶子结点的数目 
int LeafNodes(BTNode *T)
{
	int n1, n2;
	if (T == NULL) {
		return 0;
	}
	else if (T->lchild == NULL && T->rchild == NULL)
		return 1;
	else {
		n1 = LeafNodes(T->lchild);
		n2 = LeafNodes(T->rchild);
		return (n1 + n2);
	}
}
//计算二叉树深度
int BTNodeDepth(BTNode *T)//递归深度
{
	int left = 0;
	int right = 0;
	int deep = 0;
	if (T != NULL)
	{
		left = BTNodeDepth(T->lchild);             //求左子树深度
		right = BTNodeDepth(T->rchild);          //求右子树深度
		deep = left > right ? (left + 1) : (right + 1);
	}
	return deep;
}


BTNode Swap(BTNode *T)//递归算法，将二叉树中所有结点的左、右子树相互交换
{

	if (T != NULL) {
		BTNode *t;
		t = T->lchild;
		T->lchild = T->rchild;
		T->rchild = t;
		Swap(T->lchild);
		Swap(T->rchild);
	}
	return *T;
}


//使用非递归先序遍历二叉树
//数据结构中先序遍历二叉数的步骤为：
//1.访问根节点。2.先序遍历左子树。3.先序遍历右子树。（总结为：先访问根节点，再访问左子树，最后访问右子树-根，左，右）。
//因此，先将根节点进栈，在栈不空的时候循环：
//出栈p，访问*p节点，若它有右孩子，将其右孩子的节点进栈，
//若它有左孩子，再将左孩子节点进栈，进行非递归算法。 
void PreOrder1(BTNode *T)
{

	if (T != NULL)
	{
		BTNode *St[100], *p;
		int top = -1;
		top++;
		St[top] = T;
		while (top != -1)
		{
			p = St[top];
			top--;
			printf("%d ", p->data);
			if (p->rchild != NULL)  //右孩子进栈 
			{
				top++;
				St[top] = p->rchild;
			}
			if (p->lchild != NULL)
			{
				top++;
				St[top] = p->lchild; //左孩子进栈 
			}
		}
		printf("\n");
	}
}

void LevelOrder(BTNode *T) {
	BTNode *p;
	BTNode *qu[100];//定义循环队列，存放节点指针
	int front, rear;//定义队头和队尾指针
	front = rear = 0;//置队列为空队列
	rear++;//根节点指针进队
	qu[rear] = T;
	while (front != rear)//队列不为空
	{
		front = (front + 1) % 100;//队头出队
		p = qu[front];//访问节点
		printf("%d ", p->data);
		if (p->lchild != NULL)//有左孩子时将其进队
		{
			rear = (rear + 1) % 100;
			qu[rear] = p->lchild;
		}
		if (p->rchild != NULL)//有右孩子时将其进队
		{
			rear = (rear + 1) % 100;
			qu[rear] = p->rchild;
		}
	}
}


BTNode *creat1()//申请一个结点空间，返回指向其的指针 
{
	Tree[loc].lchild = Tree[loc].rchild = NULL;//初始化左右儿子为空 
	return &Tree[loc++];//返回指针，loc累加 
}
//插入元素 
BTNode *insert1(BTNode *T, int x)
{
	if (T == NULL)
	{
		T = creat1();
		T->data = x;
		return T;
	}
	else if (x<T->data)
	{
		T->lchild = insert1(T->lchild, x);
	}
	else
	{
		T->rchild = insert1(T->rchild, x);

	}
	return T;
}
//查找第几个结点
int trave(BTNode *T, int k)
{
	if (T != NULL)
	{
		trave(T->lchild, k);
		n++;
		if (k == n)
		{
			//printf("已查找到该数，该数为%d\n",T->c);
			return T->data;
		}
		trave(T->rchild, k);
	}
}
//计算二叉树的结点数
int count(BTNode *T)
{
	int n1, n2;
	if (T == NULL)
	{
		return 0;
	}
	else
	{
		n1 = count(T->lchild);
		n2 = count(T->rchild);
		return n1 + n2 + 1;
	}
}
//从以Tree为根指针的二叉排序树中删除结点（适用各种位置的结点）
void delBST(BTNode *T)
{

	int key = 0;
	printf("请输入要删除的结点：");
	scanf_s("%d", &key);
	delUsing(T, key);
	//PreOrder(T);
	ch = getchar();
}
BTNode* delUsing(BTNode *T, int key)
{
	if (T == NULL)
		printf("删除失败!");
	else
	{
		if (T->data == key)
		{
			printf("删除成功!");
			T=del(T);
		}
		else
		{
			if (T->data<key)
				T->rchild=delUsing(T->rchild, key);
			else
				T->lchild=delUsing(T->lchild, key);
		}
		return T;
	}
}
BTNode* del(BTNode *pRoot)
{
	BTNode *q, *s;
	if (pRoot->rchild == NULL)
	{
		q = pRoot;
		pRoot = pRoot->lchild;
		q = NULL;
	}
	else
	{
		if (pRoot->lchild == NULL)
		{
			q = pRoot;
			pRoot = pRoot->rchild;
			q = NULL;
		}
		else
		{
			q = pRoot;
			s = pRoot->lchild;
			while (s->rchild != NULL)
			{
				q = s;
				s = s->rchild;
			}
			pRoot->data = s->data;
			if (q != pRoot)
				q->rchild = s->lchild;
			else
				q->lchild = s->lchild;
			s = NULL;
		}
	}
	return pRoot;
}
//用广义表表示以Tree为根指针的二叉树
void generalized_list(BTNode *T)
{
	if (T != NULL) {
		printf("%d", T->data);
		if (T->lchild != NULL || T->rchild != NULL) {
			printf("(");
			generalized_list(T->lchild);
			if (T->rchild != NULL)
				printf(",");
			generalized_list(T->rchild);
			printf(")");
		}
	}
}
